
---The actor model---

What is meant by the actor model for concurrency?

How is the actor model different from processes and threads?

----Sequential Erlang----

How is the functional paradigm different from the imperative paradigm?


-------Data types-----
For each of the Erlang data types listed below, give examples on how to use values of that type:

Atom
best paired with other data types.

Number
Tuple
List
Fun

----Single assignment varaiables-----

What is meant by single assignment?
Data types cant be modified. You assign new ones instead.

-----Pattern matching----
Explain using examples how pattern matching occurs when evaluating:

a function call
Arguments fall through the different patterns. First one that matches is taken.

a case expression


a receive expression

a match operator (=) expressions.

-----Lists-----
The list is one of the main main data structures used in Erlang.

what is mean by the head of a list?
First element.

what is mean by the tail of a list?
Everything but the head.

-Explain each of the following list operations using examples:

adding an element to the head of a list?
[X]++L.

extracting the value of the first element (head) of a list?
Pattern match H|_


list comprehensions
[N*2||N<-L,N rem 2==0]

lists:map/2
L = lists:seq(1,6).
Fun = fun(K) -> K*2 end.
lists:map(Fun,L).
-result: [2,4,6,8,10,12]


lists:foldl/3
L = lists:seq(1,6).
Fun = fun(A,B) -> A+B end.
lists:map(Fun,0,L).
-result: 10.



lists:seq/2
L = lists:seq(0,6).
-result: [0,1,2,3,4,5,6].

lists:seq/3
L = lists:seq(0,6,2).
-result: [0,2,4,6].

Recursive functions
Functional programming languages usually do not offer looping constructs like for and while. Instead, functional programmers rely on recursion.

What is meant by a recursive function?
A function that calls itself.

What is meant by a tail recursive function?
A recursive call in such a way the stackframe from last call is not needed.

Why is tail recursive functions important?
Optimizes stack use.

----Function declaration-----
When declaring a function, explain the meaning of the following symbols:

->  (right arrow)
End of function header, start of body.

;    (semi colon)
end of current patternmatch also return.

.    (period)
end of function also return.

,    (comma)
end of expression but no return.

----Guards-----
Explain using examples how guards can be used together with:

function declarations
if expressions
case expressions
Concurrent Erlang
Erlang is designed for massive concurrency. 

Single assignment variables
Erlang uses single assignment variables.

In the context of concurrent computing, what is the implication of single assignment?
Erlang processes 
Compared to operating system processes and threads, why is it possible to create and concurrently execute a very large number of Erlang processes?
Explain the effects of calling spawn/3.
Do Erlang processes share any memory?
How can a process get to know its own process id (PID)?
Message passing
In Erlang, processes communicate using message passing. Explain the syntax for: 

sedning a message from one process to another process.
receiving a message from a process.
In Erlang: 

what can be sent in a message?
how is pattern matching used when receiving messages?
is sending a message blocking the sender?
is receiving a message blocking the receiver?
is message passing in Erlang synchronous or asynchronous?
if a process sends a message to another process and wants that process to send some sort of result back, how can this be accomplished?
Process state
Remember that Erlang uses single assignment:

how is it possible for a process to change state?
Process supervision
In Erlang, processes can be linked to each other.

What is the effect of linking two processes?
What is the purpose of trap exit?
Sometimes a process needs to terminate another process:

How can exit/2 be used to terminate a process?
How do trap exit affect the behaviour of exit/2?
 
